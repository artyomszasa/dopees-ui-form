var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

import { property, observe } from "@polymer/decorators/lib/decorators.js";
import { dedupingMixin } from "@polymer/polymer/lib/utils/mixin.js";
export const keyIsField = Symbol('isField');
export const instanceofField = node => {
  let proto = node.constructor;

  while (proto) {
    if (true === proto[keyIsField]) {
      return true;
    }

    proto = Object.getPrototypeOf(proto);
  }

  return false;
};
const keyLastFocused = Symbol('lastFocused');
export const ValidationMixin = dedupingMixin(base => {
  class SomeFieldWithValidation extends base {
    performValidation() {
      if (this.activated) {
        this.validationMessage = this.validate();
      }
    }

    validateOnFocusChange(focused) {
      const lastFocused = this[keyLastFocused] || false;

      if (focused || !lastFocused) {
        return;
      }

      this.validationMessage = this.validate();
    }

  }

  __decorate([observe('value')], SomeFieldWithValidation.prototype, "performValidation", null);

  __decorate([observe('focused')], SomeFieldWithValidation.prototype, "validateOnFocusChange", null);

  ;
  return SomeFieldWithValidation;
});
export const FieldMixin = dedupingMixin(base => {
  class SomeField extends base {
    constructor() {
      super(...arguments);
      this.activated = false;
      this.dirty = false;
      this.readonly = false;
      this.required = false;
      this.focused = false;
      this.invalid = false;
    }

    activate() {
      throw new Error('activate not implemented');
    }

    validate() {
      return undefined;
    }

    validationMessageChanged(validationMessage) {
      this.invalid = !!validationMessage;
    }

  }

  __decorate([property({
    type: Boolean,
    notify: true,
    reflectToAttribute: true
  })], SomeField.prototype, "activated", void 0);

  __decorate([property({
    type: Boolean,
    notify: true,
    reflectToAttribute: true
  })], SomeField.prototype, "dirty", void 0);

  __decorate([property({
    type: Boolean,
    reflectToAttribute: true
  })], SomeField.prototype, "readonly", void 0);

  __decorate([property({
    type: Boolean,
    reflectToAttribute: true
  })], SomeField.prototype, "required", void 0);

  __decorate([property({
    type: Boolean,
    notify: true,
    reflectToAttribute: true
  })], SomeField.prototype, "focused", void 0);

  __decorate([property({
    type: Boolean,
    notify: true,
    reflectToAttribute: true
  })], SomeField.prototype, "invalid", void 0);

  __decorate([property({
    type: Boolean,
    notify: true,
    reflectToAttribute: true
  })], SomeField.prototype, "empty", void 0);

  __decorate([property({
    type: String
  })], SomeField.prototype, "requiredMessage", void 0);

  __decorate([property({
    type: String,
    notify: true
  })], SomeField.prototype, "validationMessage", void 0);

  __decorate([observe('validationMessage')], SomeField.prototype, "validationMessageChanged", null);

  ;
  SomeField.constructor[keyIsField] = true;
  return SomeField;
});
export const DecoratedWrapperMixin = dedupingMixin(base => {
  class SomeDecoratedField extends base {
    constructor() {
      super(...arguments);
      this.label = '';
    }

  }

  __decorate([property({
    type: String
  })], SomeDecoratedField.prototype, "label", void 0);

  __decorate([property({
    type: String
  })], SomeDecoratedField.prototype, "hint", void 0);

  ;
  return SomeDecoratedField;
});
export const DecoratedFieldMixin = base => DecoratedWrapperMixin(FieldMixin(base));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,