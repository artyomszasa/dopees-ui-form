var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var DateRangePicker_1;
import "./date-range-field.js";
import { customElement, property, query, observe } from "@polymer/decorators/lib/decorators.js";
import { sprintf } from "dopees-core/lib/string.js";
import { Picker } from "./picker.js";
let DateRangePicker = DateRangePicker_1 = class DateRangePicker extends Picker {
  constructor() {
    super();
    this.value = {};

    this.selection = () => false;

    this.formatter = x => {
      if (!x) {
        return this.placeholder || '';
      }

      if (x.start) {
        if (x.end) {
          return sprintf('%04d. %02d. %02d -- %04d. %02d. %02d', x.start.year, x.start.month, x.start.day, x.end.year, x.end.month, x.end.day);
        }

        return sprintf('%04d. %02d. %02d', x.start.year, x.start.month, x.start.day);
      }

      if (x.end) {
        return sprintf('%04d. %02d. %02d', x.end.year, x.end.month, x.end.day);
      }

      return this.placeholder || '';
    };
  }

  static get template() {
    return Picker.createTemplate(DateRangePicker_1, {
      implementation: 'dope-date-range-field',
      arguments: {
        years: '[[years]]',
        months: '[[months]]',
        selection: '[[selection]]',
        value: '{{value}}',
        'start-date': '{{startDate}}',
        'end-date': '{{endDate}}'
      }
    });
  }

  activate() {
    this.wrapper.focus();
    this.innerField.activate();
  }

  forceEmpty(empty) {
    this.dropDown.forcedEmpty = empty;
  }

  observeEmpty(value) {
    this.empty = !value || !(value.start || value.end);
  }

  valueChanged(value) {
    this.__valueChanging = true;

    try {
      this.startDate = value.start;
      this.endDate = value.end;
    } finally {
      this.__valueChanging = false;
    }
  }

  valuesChanged(start, end) {
    if (start) {
      if (end) {
        this.selection = date => 0 <= date.compareTo(start) && 0 >= date.compareTo(end);
      } else {
        this.selection = date => date.equalsTo(start);
      }
    } else {
      if (end) {
        this.selection = date => date.equalsTo(end);
      } else {
        this.selection = () => false;
      }
    }

    if (!this.__valueChanging) {
      this.value = {
        start,
        end
      };
    }
  }

};

__decorate([property({
  type: Object,
  notify: true
})], DateRangePicker.prototype, "value", void 0);

__decorate([property({
  type: Object,
  notify: true
})], DateRangePicker.prototype, "startDate", void 0);

__decorate([property({
  type: Object,
  notify: true
})], DateRangePicker.prototype, "endDate", void 0);

__decorate([property()], DateRangePicker.prototype, "formatter", void 0);

__decorate([property()], DateRangePicker.prototype, "selection", void 0);

__decorate([query('dope-date-range-field')], DateRangePicker.prototype, "innerField", void 0);

__decorate([observe('empty')], DateRangePicker.prototype, "forceEmpty", null);

__decorate([observe('value')], DateRangePicker.prototype, "observeEmpty", null);

__decorate([observe('value')], DateRangePicker.prototype, "valueChanged", null);

__decorate([observe('startDate', 'endDate')], DateRangePicker.prototype, "valuesChanged", null);

DateRangePicker = DateRangePicker_1 = __decorate([customElement('dope-date-range-picker')], DateRangePicker);
export { DateRangePicker };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,